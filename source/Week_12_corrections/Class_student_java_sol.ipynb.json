{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Syntaxe Java\n",
    "\n",
    "Pour plus d'informations sur la syntaxe de Java, veuillez vous référer à la documentation de wikiversity, w3schools ou geeksforgeeks:\n",
    "\n",
    "https://fr.wikiversity.org/wiki/Java/Classes_et_objets\n",
    "\n",
    "https://www.w3schools.com/java/default.asp\n",
    "\n",
    "https://www.geeksforgeeks.org/java-tutorials/\n",
    "\n",
    "Dans la cellule suivante, vous trouverez un exemple de déclaration d'une classe `Dog`. Veuillez y jeter un oeil et l'exécuter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "com.twosigma.beaker.javash.bkr3609011f.Dog"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "// source: https://www.geeksforgeeks.org/classes-objects-java/ \n",
    "// Class Declaration  \n",
    "public class Dog \n",
    "{ \n",
    "    // Instance Variables \n",
    "    String name; \n",
    "    String breed; \n",
    "    int age; \n",
    "    String color; \n",
    "  \n",
    "    // Constructor Declaration of Class \n",
    "    public Dog(String name, String breed, \n",
    "                   int age, String color) \n",
    "    { \n",
    "        this.name = name; \n",
    "        this.breed = breed; \n",
    "        this.age = age; \n",
    "        this.color = color; \n",
    "    } \n",
    "  \n",
    "    // method 1 \n",
    "    public String getName() \n",
    "    { \n",
    "        return name; \n",
    "    } \n",
    "  \n",
    "    // method 2 \n",
    "    public String getBreed() \n",
    "    { \n",
    "        return breed; \n",
    "    } \n",
    "  \n",
    "    // method 3 \n",
    "    public int getAge() \n",
    "    { \n",
    "        return age; \n",
    "    } \n",
    "  \n",
    "    // method 4 \n",
    "    public String getColor() \n",
    "    { \n",
    "        return color; \n",
    "    } \n",
    "  \n",
    "    @Override\n",
    "    public String toString() \n",
    "    { \n",
    "        return(\"Hi my name is \"+ this.getName()+ \n",
    "               \".\\nMy breed,age and color are \" + \n",
    "               this.getBreed()+\",\" + this.getAge()+ \n",
    "               \",\"+ this.getColor()); \n",
    "    } \n",
    "  \n",
    "    public static void main(String[] args) \n",
    "    { \n",
    "        Dog tuffy = new Dog(\"tuffy\",\"papillon\", 5, \"white\"); \n",
    "        System.out.println(tuffy.toString()); \n",
    "    } \n",
    "} "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise\n",
    "\n",
    "La semaine passée vous avez eu l'occasion de créer une classe nommée `Student`. En python, la solution se présentait comme ci-dessous.\n",
    "\n",
    "`class Student: \n",
    "\n",
    "    def __init__(self, name:str, year:int): #constructeur\n",
    "        self.name = name\n",
    "        self.year = year\n",
    "        self.grades = [] \n",
    "        \n",
    "    def get_name(self):\n",
    "        return self.name\n",
    "    \n",
    "    def get_year(self):\n",
    "        return self.year\n",
    "    \n",
    "    def add_grade(self, grade:int):\n",
    "        self.grades.append(grade)\n",
    "        \n",
    "    def final_grade(self):\n",
    "        if len (self.grades)>0:\n",
    "            return sum(self.grades)/len(self.grades)\n",
    "        else:\n",
    "            return 0\n",
    "        \n",
    "    def evaluate_year(self):\n",
    "        if self.final_grade() >= 4:\n",
    "            self.year += 1\n",
    "            self.grades = []\n",
    "            \n",
    "    def __str__(self):\n",
    "        return self.name + \" is in year \" + str(self.year) + (\"  with average grade \" + str(self.final_grade())   if`len(self.grades) > 0 else \" \")\n",
    "        \n",
    "Tanguy = Student(\"Tanguy\", 1)\n",
    "\n",
    "Tanguy.add_grade(4)\n",
    "\n",
    "Tanguy.evaluate_year()\n",
    "\n",
    "print(Tanguy._str_())`\n",
    "\n",
    "**A faire:**\n",
    "\n",
    "Reprenez les informations importantes de cette solution pour réecrire la même classe en java. Inspirez vous également de la classe Dog donnée ci-dessus."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "com.twosigma.beaker.javash.bkr3609011f.Student"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "// svp écrivez tout votre code dans la même cellule code\n",
    "\n",
    "// imports\n",
    "import java.util.ArrayList; // for ArrayList functions \n",
    "import java.util.*;\n",
    "\n",
    "// Class Declaration\n",
    "public class Student{\n",
    "    \n",
    "    // Instance Variables \n",
    "    String name;\n",
    "    int year;\n",
    "    ArrayList<Integer> grades = new ArrayList<>();\n",
    "    \n",
    "    // Constructor Declaration of Class\n",
    "    public Student(String name, int year){\n",
    "        this.name = name;\n",
    "        this.year = year;   \n",
    "    }   \n",
    "    \n",
    "    // method 1 \n",
    "    public String getname(){  \n",
    "        return name;\n",
    "    }\n",
    "    \n",
    "    // method 2\n",
    "    public int getyear(){\n",
    "        return year;\n",
    "    }\n",
    "    \n",
    "    // method 3\n",
    "    public int add_grade(int grade){\n",
    "        grades.add(grade); // using add() to initialize values \n",
    "    }\n",
    "\n",
    "    // method 4\n",
    "    public int final_grade(){\n",
    "        int sum=0;\n",
    "        for (int i=0; i< grades.size();i++){\n",
    "            sum += grades.get(i); // get the sum of the elements in the list\n",
    "        } \n",
    "        // double avg = sum/grades.size(); \n",
    "        if (grades.size() > 0){\n",
    "             return sum/grades.size(); \n",
    "        } else{\n",
    "            return 0;\n",
    "        }    \n",
    "    }  \n",
    "    \n",
    "    // method 5\n",
    "    public int evaluate_year(){\n",
    "        if (this.final_grade() >= 4)\n",
    "            this.year += 1;\n",
    "            grades.clear(); // clear fucntion used \n",
    "    }\n",
    "    \n",
    "    // method 6\n",
    "     @Override\n",
    "    public String toString(){\n",
    "        return(this.getname()+ \" is in year \" +\n",
    "               this.getyear() + \"  with average grade \" +\n",
    "               grades + this.final_grade());\n",
    "               \n",
    "    }\n",
    "        \n",
    "    // method  main\n",
    "    public static void main(String[] args){\n",
    "        Student t = new Student(\"Tanguy\",1);\n",
    "        t.add_grade(4);\n",
    "        t.evaluate_year();\n",
    "        System.out.println(t.toString());\n",
    "    \n",
    "    }\n",
    "    \n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Java",
   "language": "java",
   "name": "java"
  },
  "language_info": {
   "codemirror_mode": "text/x-java",
   "file_extension": ".java",
   "mimetype": "",
   "name": "Java",
   "nbconverter_exporter": "",
   "version": "1.8.0_222"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": false,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": false,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
